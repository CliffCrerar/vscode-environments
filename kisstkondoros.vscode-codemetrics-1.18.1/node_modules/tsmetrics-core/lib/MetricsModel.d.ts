import { IMetricsConfiguration } from './MetricsConfiguration';
export declare type CollectorType = "SUM" | "MAX";
export interface IMetricsModel {
    line: number;
    column: number;
    complexity: number;
    visible: boolean;
    children: IMetricsModel[];
    description: string;
    start: number;
    end: number;
    text: string;
    collectorType: CollectorType;
    getCollectedComplexity(): number;
    toLogString(level: string): string;
    toString(settings: IMetricsConfiguration): string;
    getExplanation(): string;
    clone(deepClone?: boolean): IMetricsModel;
}
export declare class MetricsModel implements IMetricsModel {
    line: number;
    column: number;
    complexity: number;
    visible: boolean;
    children: IMetricsModel[];
    description: string;
    start: number;
    end: number;
    text: string;
    collectorType: CollectorType;
    constructor(start: number, end: number, text: string, line: number, column: number, complexity: number, description: string, trim: boolean, visible: boolean, collectorType: CollectorType);
    private storeText(text, trim);
    getCollectedComplexity(): number;
    toLogString(level: string): string;
    private pad(str, lenghtToFit?);
    toString(settings: IMetricsConfiguration): string;
    getExplanation(): string;
    clone(deepClone?: boolean): IMetricsModel;
    private roundComplexity(complexity);
}
