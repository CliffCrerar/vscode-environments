import { MetricsModel, IMetricsModel } from './MetricsModel';
import { IMetricsConfiguration } from "./MetricsConfiguration";
export interface IMetricsParseResult {
    file: string;
    metrics: IMetricsModel;
}
export interface IMetricsParser {
    getMetrics(fileName: string, configuration: IMetricsConfiguration, target: ts.ScriptTarget): IMetricsParseResult;
    getMetricsFromText(fileName: string, content: string, configuration: IMetricsConfiguration, target: ts.ScriptTarget): IMetricsParseResult;
}
import * as ts from 'typescript';
export declare class MetricsParserImpl implements IMetricsParser {
    getMetrics(fileName: string, configuration: IMetricsConfiguration, target: ts.ScriptTarget): IMetricsParseResult;
    getMetricsFromText(fileName: string, content: string, configuration: IMetricsConfiguration, target: ts.ScriptTarget): IMetricsParseResult;
}
export declare let MetricsParser: IMetricsParser;
export interface IMetricsVisitor {
    currentModel: IMetricsModel;
    visit(node: ts.Node, complexity: number, description: string, visible?: boolean): MetricsModel;
}
export declare class TreeWalker {
    visitor: IMetricsVisitor;
    configuration: IMetricsConfiguration;
    constructor(visitor: IMetricsVisitor, configuration: IMetricsConfiguration);
    protected visitNode(node: ts.Node, parent: MetricsModel): void;
    protected getLens(node: ts.Node): MetricsModel;
    walk(node: ts.Node): MetricsModel;
    protected walkChildren(node: ts.Node, parent: MetricsModel): void;
}
