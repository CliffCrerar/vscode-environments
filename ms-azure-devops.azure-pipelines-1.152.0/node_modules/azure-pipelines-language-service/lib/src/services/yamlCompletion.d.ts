import SchemaService = require('./jsonSchemaService');
import { JSONWorkerContribution } from '../jsonContributions';
import { PromiseConstructor, Thenable } from 'vscode-json-languageservice';
import { CompletionItem, CompletionList, TextDocument, Position } from 'vscode-languageserver-types';
import { YAMLDocument } from '../parser/yamlParser';
export declare class YAMLCompletion {
    private schemaService;
    private contributions;
    private promise;
    private customTags;
    constructor(schemaService: SchemaService.IJSONSchemaService, contributions?: JSONWorkerContribution[], promiseConstructor?: PromiseConstructor);
    configure(customTags: Array<String>): void;
    doResolve(item: CompletionItem): Thenable<CompletionItem>;
    doComplete(document: TextDocument, position: Position, yamlDocument: YAMLDocument): Thenable<CompletionList>;
    private arrayIsEmptyOrContainsKey(stringArray, key);
    private getPropertyCompletions(schema, doc, node, addValue, collector, separatorAfter);
    private getValueCompletions(schema, doc, node, offset, document, collector, types);
    private getContributedValueCompletions(doc, node, offset, document, collector, collectionPromises);
    private getCustomTagValueCompletions(collector);
    private addSchemaValueCompletions(schema, collector, types, separatorAfter);
    private addDefaultValueCompletions(schema, collector, separatorAfter, arrayDepth?);
    private addEnumValueCompletions(schema, collector, separatorAfter);
    private collectTypes(schema, types);
    private addBooleanValueCompletion(value, collector, separatorAfter);
    private addNullValueCompletion(collector, separatorAfter);
    private addCustomTagValueCompletion(collector, separatorAfter, label);
    private getLabelForValue(value);
    private getSuggestionKind(type);
    private getCurrentWord(document, offset);
    private findItemAtOffset(node, document, offset);
    private isInComment(document, start, offset);
    private getInsertTextForPlainText(text);
    private getInsertTextForValue(value, separatorAfter);
    private getInsertTextForProperty(key, propertySchema, addValue, separatorAfter);
    private evaluateSeparatorAfter(document, offset);
}
